/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type RepositoryGitInfoQueryVariables = Types.Exact<{
  owner: Types.Scalars['String'];
  name: Types.Scalars['String'];
}>;


export type RepositoryGitInfoQuery = { readonly repository?: Types.Maybe<{ readonly object?: Types.Maybe<{ readonly entries?: Types.Maybe<ReadonlyArray<{ readonly name: string, readonly type: string, readonly extension?: Types.Maybe<string> }>> }>, readonly ref?: Types.Maybe<{ readonly target?: Types.Maybe<{ readonly id: string, readonly history: { readonly edges?: Types.Maybe<ReadonlyArray<Types.Maybe<{ readonly node?: Types.Maybe<{ readonly messageHeadline: string, readonly oid: any, readonly message: string, readonly author?: Types.Maybe<{ readonly name?: Types.Maybe<string>, readonly email?: Types.Maybe<string>, readonly date?: Types.Maybe<any> }> }> }>>> } }> }> }> };


export const RepositoryGitInfoDocument = gql`
    query RepositoryGitInfo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: "master:") {
      ... on Tree {
        entries {
          name
          type
          extension
        }
      }
    }
    ref(qualifiedName: "master") {
      target {
        ... on Commit {
          id
          history(first: 1) {
            edges {
              node {
                messageHeadline
                oid
                message
                author {
                  name
                  email
                  date
                }
              }
            }
          }
        }
      }
    }
  }
}
    `;

/**
 * __useRepositoryGitInfoQuery__
 *
 * To run a query within a React component, call `useRepositoryGitInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useRepositoryGitInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRepositoryGitInfoQuery({
 *   variables: {
 *      owner: // value for 'owner'
 *      name: // value for 'name'
 *   },
 * });
 */
export function useRepositoryGitInfoQuery(baseOptions?: Apollo.QueryHookOptions<RepositoryGitInfoQuery, RepositoryGitInfoQueryVariables>) {
        return Apollo.useQuery<RepositoryGitInfoQuery, RepositoryGitInfoQueryVariables>(RepositoryGitInfoDocument, baseOptions);
      }
export function useRepositoryGitInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RepositoryGitInfoQuery, RepositoryGitInfoQueryVariables>) {
          return Apollo.useLazyQuery<RepositoryGitInfoQuery, RepositoryGitInfoQueryVariables>(RepositoryGitInfoDocument, baseOptions);
        }
export type RepositoryGitInfoQueryHookResult = ReturnType<typeof useRepositoryGitInfoQuery>;
export type RepositoryGitInfoLazyQueryHookResult = ReturnType<typeof useRepositoryGitInfoLazyQuery>;
export type RepositoryGitInfoQueryResult = Apollo.QueryResult<RepositoryGitInfoQuery, RepositoryGitInfoQueryVariables>;