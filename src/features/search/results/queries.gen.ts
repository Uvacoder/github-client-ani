/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type RepoFieldsFragment = { readonly id: string, readonly name: string, readonly url: any, readonly updatedAt: any, readonly viewerHasStarred: boolean, readonly owner: { readonly login: string } | { readonly login: string }, readonly primaryLanguage?: Types.Maybe<{ readonly name: string, readonly color?: Types.Maybe<string> }> };

export type UserFieldsFragment = { readonly id: string, readonly login: string, readonly bio?: Types.Maybe<string>, readonly avatarUrl: any, readonly viewerIsFollowing: boolean };

export type OrgFieldsFragment = { readonly id: string, readonly login: string, readonly avatarUrl: any, readonly description?: Types.Maybe<string> };

export type SearchQueryVariables = Types.Exact<{
  query: Types.Scalars['String'];
  type: Types.SearchType;
  first: Types.Scalars['Int'];
  after: Types.Scalars['String'];
}>;


export type SearchQuery = { readonly search: { readonly userCount: number, readonly repositoryCount: number, readonly nodes?: Types.Maybe<ReadonlyArray<Types.Maybe<OrgFieldsFragment | RepoFieldsFragment | UserFieldsFragment>>> } };

export const RepoFieldsFragmentDoc = gql`
    fragment RepoFields on Repository {
  id
  name
  url
  owner {
    login
  }
  updatedAt
  primaryLanguage {
    name
    color
  }
  viewerHasStarred
}
    `;
export const UserFieldsFragmentDoc = gql`
    fragment UserFields on User {
  id
  login
  bio
  avatarUrl
  viewerIsFollowing
}
    `;
export const OrgFieldsFragmentDoc = gql`
    fragment OrgFields on Organization {
  id
  login
  avatarUrl
  description
}
    `;
export const SearchDocument = gql`
    query Search($query: String!, $type: SearchType!, $first: Int!, $after: String!) {
  search(query: $query, type: $type, first: $first, after: $after) {
    userCount
    repositoryCount
    nodes {
      ...RepoFields
      ...UserFields
      ...OrgFields
    }
  }
}
    ${RepoFieldsFragmentDoc}
${UserFieldsFragmentDoc}
${OrgFieldsFragmentDoc}`;

/**
 * __useSearchQuery__
 *
 * To run a query within a React component, call `useSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchQuery({
 *   variables: {
 *      query: // value for 'query'
 *      type: // value for 'type'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useSearchQuery(baseOptions?: Apollo.QueryHookOptions<SearchQuery, SearchQueryVariables>) {
        return Apollo.useQuery<SearchQuery, SearchQueryVariables>(SearchDocument, baseOptions);
      }
export function useSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchQuery, SearchQueryVariables>) {
          return Apollo.useLazyQuery<SearchQuery, SearchQueryVariables>(SearchDocument, baseOptions);
        }
export type SearchQueryHookResult = ReturnType<typeof useSearchQuery>;
export type SearchLazyQueryHookResult = ReturnType<typeof useSearchLazyQuery>;
export type SearchQueryResult = Apollo.QueryResult<SearchQuery, SearchQueryVariables>;