/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type RepoSearchQueryVariables = Types.Exact<{
  query: Types.Scalars['String'];
}>;


export type RepoSearchQuery = { readonly search: { readonly nodes?: Types.Maybe<ReadonlyArray<Types.Maybe<{ readonly id: string, readonly name: string, readonly updatedAt: any, readonly viewerHasStarred: boolean, readonly primaryLanguage?: Types.Maybe<{ readonly color?: Types.Maybe<string>, readonly name: string }>, readonly owner: { readonly login: string } | { readonly login: string } }>>> } };


export const RepoSearchDocument = gql`
    query RepoSearch($query: String!) {
  search(query: $query, type: REPOSITORY, first: 10) {
    nodes {
      ... on Repository {
        id
        name
        primaryLanguage {
          color
          name
        }
        owner {
          login
        }
        updatedAt
        viewerHasStarred
      }
    }
  }
}
    `;

/**
 * __useRepoSearchQuery__
 *
 * To run a query within a React component, call `useRepoSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useRepoSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRepoSearchQuery({
 *   variables: {
 *      query: // value for 'query'
 *   },
 * });
 */
export function useRepoSearchQuery(baseOptions?: Apollo.QueryHookOptions<RepoSearchQuery, RepoSearchQueryVariables>) {
        return Apollo.useQuery<RepoSearchQuery, RepoSearchQueryVariables>(RepoSearchDocument, baseOptions);
      }
export function useRepoSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RepoSearchQuery, RepoSearchQueryVariables>) {
          return Apollo.useLazyQuery<RepoSearchQuery, RepoSearchQueryVariables>(RepoSearchDocument, baseOptions);
        }
export type RepoSearchQueryHookResult = ReturnType<typeof useRepoSearchQuery>;
export type RepoSearchLazyQueryHookResult = ReturnType<typeof useRepoSearchLazyQuery>;
export type RepoSearchQueryResult = Apollo.QueryResult<RepoSearchQuery, RepoSearchQueryVariables>;