/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type AddStarMutationVariables = Types.Exact<{
  starrableId: Types.Scalars['ID'];
}>;


export type AddStarMutation = { readonly addStar?: Types.Maybe<{ readonly starrable?: Types.Maybe<{ readonly id: string } | { readonly id: string } | { readonly id: string }> }> };

export type RemoveStarMutationVariables = Types.Exact<{
  starrableId: Types.Scalars['ID'];
}>;


export type RemoveStarMutation = { readonly removeStar?: Types.Maybe<{ readonly starrable?: Types.Maybe<{ readonly id: string } | { readonly id: string } | { readonly id: string }> }> };


export const AddStarDocument = gql`
    mutation AddStar($starrableId: ID!) {
  addStar(input: {starrableId: $starrableId}) {
    starrable {
      id
    }
  }
}
    `;
export type AddStarMutationFn = Apollo.MutationFunction<AddStarMutation, AddStarMutationVariables>;

/**
 * __useAddStarMutation__
 *
 * To run a mutation, you first call `useAddStarMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddStarMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addStarMutation, { data, loading, error }] = useAddStarMutation({
 *   variables: {
 *      starrableId: // value for 'starrableId'
 *   },
 * });
 */
export function useAddStarMutation(baseOptions?: Apollo.MutationHookOptions<AddStarMutation, AddStarMutationVariables>) {
        return Apollo.useMutation<AddStarMutation, AddStarMutationVariables>(AddStarDocument, baseOptions);
      }
export type AddStarMutationHookResult = ReturnType<typeof useAddStarMutation>;
export type AddStarMutationResult = Apollo.MutationResult<AddStarMutation>;
export type AddStarMutationOptions = Apollo.BaseMutationOptions<AddStarMutation, AddStarMutationVariables>;
export const RemoveStarDocument = gql`
    mutation RemoveStar($starrableId: ID!) {
  removeStar(input: {starrableId: $starrableId}) {
    starrable {
      id
    }
  }
}
    `;
export type RemoveStarMutationFn = Apollo.MutationFunction<RemoveStarMutation, RemoveStarMutationVariables>;

/**
 * __useRemoveStarMutation__
 *
 * To run a mutation, you first call `useRemoveStarMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRemoveStarMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [removeStarMutation, { data, loading, error }] = useRemoveStarMutation({
 *   variables: {
 *      starrableId: // value for 'starrableId'
 *   },
 * });
 */
export function useRemoveStarMutation(baseOptions?: Apollo.MutationHookOptions<RemoveStarMutation, RemoveStarMutationVariables>) {
        return Apollo.useMutation<RemoveStarMutation, RemoveStarMutationVariables>(RemoveStarDocument, baseOptions);
      }
export type RemoveStarMutationHookResult = ReturnType<typeof useRemoveStarMutation>;
export type RemoveStarMutationResult = Apollo.MutationResult<RemoveStarMutation>;
export type RemoveStarMutationOptions = Apollo.BaseMutationOptions<RemoveStarMutation, RemoveStarMutationVariables>;