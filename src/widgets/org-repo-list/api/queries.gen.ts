/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type OrgRepoListQueryVariables = Types.Exact<{
  login: Types.Scalars['String'];
}>;


export type OrgRepoListQuery = { readonly organization?: Types.Maybe<{ readonly repositories: { readonly nodes?: Types.Maybe<ReadonlyArray<Types.Maybe<{ readonly id: string, readonly name: string, readonly updatedAt: any, readonly viewerHasStarred: boolean, readonly primaryLanguage?: Types.Maybe<{ readonly color?: Types.Maybe<string>, readonly name: string }>, readonly owner: { readonly login: string } | { readonly login: string } }>>> } }> };


export const OrgRepoListDocument = gql`
    query OrgRepoList($login: String!) {
  organization(login: $login) {
    repositories(first: 10) {
      nodes {
        id
        name
        primaryLanguage {
          color
          name
        }
        owner {
          login
        }
        updatedAt
        viewerHasStarred
      }
    }
  }
}
    `;

/**
 * __useOrgRepoListQuery__
 *
 * To run a query within a React component, call `useOrgRepoListQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgRepoListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgRepoListQuery({
 *   variables: {
 *      login: // value for 'login'
 *   },
 * });
 */
export function useOrgRepoListQuery(baseOptions?: Apollo.QueryHookOptions<OrgRepoListQuery, OrgRepoListQueryVariables>) {
        return Apollo.useQuery<OrgRepoListQuery, OrgRepoListQueryVariables>(OrgRepoListDocument, baseOptions);
      }
export function useOrgRepoListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrgRepoListQuery, OrgRepoListQueryVariables>) {
          return Apollo.useLazyQuery<OrgRepoListQuery, OrgRepoListQueryVariables>(OrgRepoListDocument, baseOptions);
        }
export type OrgRepoListQueryHookResult = ReturnType<typeof useOrgRepoListQuery>;
export type OrgRepoListLazyQueryHookResult = ReturnType<typeof useOrgRepoListLazyQuery>;
export type OrgRepoListQueryResult = Apollo.QueryResult<OrgRepoListQuery, OrgRepoListQueryVariables>;