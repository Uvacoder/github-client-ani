/** @generated THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import * as Types from '../../../shared/api/models.gen';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type OrgPopularQueryVariables = Types.Exact<{
  login: Types.Scalars['String'];
}>;


export type OrgPopularQuery = { readonly organization?: Types.Maybe<{ readonly id: string, readonly repositories: { readonly nodes?: Types.Maybe<ReadonlyArray<Types.Maybe<{ readonly id: string, readonly name: string, readonly updatedAt: any, readonly viewerHasStarred: boolean, readonly primaryLanguage?: Types.Maybe<{ readonly color?: Types.Maybe<string>, readonly name: string }>, readonly owner: { readonly login: string } | { readonly login: string } }>>> } }> };


export const OrgPopularDocument = gql`
    query OrgPopular($login: String!) {
  organization(login: $login) {
    id
    repositories(first: 6, orderBy: {field: STARGAZERS, direction: DESC}) {
      nodes {
        ... on Repository {
          id
          name
          primaryLanguage {
            color
            name
          }
          owner {
            login
          }
          updatedAt
          viewerHasStarred
        }
      }
    }
  }
}
    `;

/**
 * __useOrgPopularQuery__
 *
 * To run a query within a React component, call `useOrgPopularQuery` and pass it any options that fit your needs.
 * When your component renders, `useOrgPopularQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOrgPopularQuery({
 *   variables: {
 *      login: // value for 'login'
 *   },
 * });
 */
export function useOrgPopularQuery(baseOptions?: Apollo.QueryHookOptions<OrgPopularQuery, OrgPopularQueryVariables>) {
        return Apollo.useQuery<OrgPopularQuery, OrgPopularQueryVariables>(OrgPopularDocument, baseOptions);
      }
export function useOrgPopularLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<OrgPopularQuery, OrgPopularQueryVariables>) {
          return Apollo.useLazyQuery<OrgPopularQuery, OrgPopularQueryVariables>(OrgPopularDocument, baseOptions);
        }
export type OrgPopularQueryHookResult = ReturnType<typeof useOrgPopularQuery>;
export type OrgPopularLazyQueryHookResult = ReturnType<typeof useOrgPopularLazyQuery>;
export type OrgPopularQueryResult = Apollo.QueryResult<OrgPopularQuery, OrgPopularQueryVariables>;